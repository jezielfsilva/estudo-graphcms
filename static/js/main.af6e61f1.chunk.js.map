{"version":3,"sources":["Components/part1.js","Components/part2.js","Components/part3.js","App.js","serviceWorker.js","index.js"],"names":["First","item","this","props","customFragment","className","page","fragments","React","Component","Second","Third","item2","App","useState","undefined","data","setData","useEffect","a","request","site","fetchData","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af6e61f1.chunk.js","sourcesContent":["import React from 'react';\n\nclass First extends React.Component {\n    render() {\n        const item = this.props?.customFragment;\n        return (\n            <div>\n                <div className=\"container-nav\">\n                    <nav className=\"box-nav\">\n                        <figure className=\"box-logo\">Logo</figure>\n                        <div className=\"box-menu\">\n                            <ul className=\"menu\">\n                                <li>Features</li>\n                                <li>FAQs</li>\n                                <li>About Us</li>\n                                <li>Contact Us</li>\n                            </ul>\n                        </div>\n                        <div className=\"box-buttons\">\n                            <button className=\"click\">Sign in</button>\n                            <button className=\"click2\">Sign up</button>\n                        </div>\n                    </nav>\n                </div>\n                <div className=\"container-title\">\n                    <h1 className=\"main-title\">{item?.page[0]?.customFragment[0]?.fragments[0]}</h1>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default First;","import React from 'react';\n\nclass Second extends React.Component {\n    render() {\n        const item = this.props?.customFragment?.page[1];\n        return (\n            <div className=\"container-two\">\n                <div className=\"line\"></div>\n                <div className=\"container-tree\">\n                    <figure className=\"box-photo\">Imagem</figure>\n                    <div className=\"box-titleText\">\n                        <h2 className=\"title-two\">{item?.customFragment[0]?.fragments[0]}</h2>\n                        <p className=\"text\">{item?.customFragment[1]?.fragments[0]}</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Second;","import React from 'react';\n\nclass Third extends React.Component {\n    render() {\n        const item = this.props?.customFragment?.page[2];\n        const item2 = this.props?.customFragment?.page[3];\n        return (\n            <div className=\"container-four\">\n                <div className=\"box-come\">\n                    <div className=\"box-titleText2\">\n                        <h2 className=\"title-tree\">{item?.customFragment[0]?.fragments[0]}</h2>\n                        <p className=\"text-two\">{item?.customFragment[1]?.fragments[0]}</p>\n                    </div>\n                    <div className=\"box-circles\">\n                        <div className=\"ellipse\"></div>\n                        <div className=\"ellipse2\"></div>\n                        <div className=\"ellipse3\"></div>\n                    </div>\n                </div>\n                <div className=\"box-final\">\n                    <figure className=\"box-photo2\">Imagem</figure>\n                    <div className=\"box-titleText3\">\n                        <h2 className=\"title-four\">{item2?.customFragment[0]?.fragments[0]}</h2>\n                        <p className=\"text-tree\">{item2?.customFragment[1]?.fragments[0]}</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Third;\n","import React, { useState, useEffect } from 'react';\nimport { request } from 'graphql-request';\nimport './App.css';\nimport First from './Components/part1';\nimport Second from './Components/part2';\nimport Third from './Components/part3';\n\nfunction App() {\n\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { site } = await request(\n        'https://api-us-east-1.graphcms.com/v2/ckg8c18062w1901xlcl3k518h/master',\n        \n        `\n        {\n          site(where: {id: \"ckg8d3ppk031c0126dr4ifov3\"}) {\n            page {\n              nome\n              customFragment {\n                nome\n                fragments\n              }\n            }\n          }\n        }\n        `\n      )\n\n      setData(site);\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n        <First customFragment={data}/> \n        {console.log(data)}\n        <Second customFragment={data}/>\n        <Third customFragment={data}/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}